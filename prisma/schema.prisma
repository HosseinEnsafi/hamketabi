generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String?    @unique
  email         String?    @unique
  phoneNumber   String?    @unique
  image         String?    @unique
  password      String?
  phoneVerified DateTime?
  accounts      Account[]
  role          UserRole   @default(USER)
  posts         Post[]
  likes         Like[]
  comments      Comment[]
  saved         Saved[]
  quotes        Quote[]
  bookLists     BookList[]
  reviews       Review[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  followedBy    Follows[]  @relation("following")
  following     Follows[]  @relation("follower")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id          String   @id @default(uuid())
  phoneNumber String   @unique
  token       String
  expires     DateTime

  @@unique([phoneNumber, token])
}

model Post {
  id       String    @id @default(cuid())
  userId   String
  user     User      @relation(fields: [userId], references: [id])
  title    String
  image    String    @unique
  body     String
  likes    Like[]    @relation()
  comments Comment[]
  savedBy  Saved[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Book {
  id         String          @id @default(cuid())
  title      String          @unique
  isbn       String          @unique
  numOfPages Int
  cover      String?         @unique
  quotes     Quote[]
  savedBy    Saved[]
  bookList   BookList[]      @relation("BookListBooks")
  publishers BookPublisher[]
  authors    BookAuthor[]
  reviews    Review[]
  categoryId String
  category   Category        @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
}

model Quote {
  id        String    @id @default(cuid())
  body      String
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookId    String
  book      Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)
  likes     Like[]
  savedBy   Saved[]
  comments  Comment[]
  updatedAt DateTime  @updatedAt
  createdAt DateTime  @default(now())
}

model BookList {
  id        String    @id @default(cuid())
  title     String
  books     Book[]    @relation("BookListBooks")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes     Like[]
  saved     Saved[]
  comments  Comment[]
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  books     Book[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Author {
  id        String       @id @default(cuid())
  name      String       @unique
  role      AuthorRole   @default(WRITER)
  books     BookAuthor[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Publisher {
  id        String          @id @default(cuid())
  name      String          @unique
  books     BookPublisher[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model BookAuthor {
  id        String   @id @default(cuid())
  bookId    String
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  authorId  String
  author    Author   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([bookId, authorId])
}

model BookPublisher {
  id          String    @id @default(cuid())
  bookId      String
  book        Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)
  publisherId String
  publisher   Publisher @relation(fields: [publisherId], references: [id], onDelete: Cascade)
  publishedAt DateTime
  createdAt   DateTime  @default(now())

  @@unique([bookId, publisherId])
}

model Review {
  id        String    @id @default(cuid())
  body      String?
  rating    Int
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookId    String
  book      Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)
  comments  Comment[]
  savedBy   Saved[]
  likes     Like[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([userId, bookId])
}

model Like {
  id           String       @id @default(cuid())
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  likeableType LikeableType
  postId       String?
  post         Post?        @relation(fields: [postId], references: [id], onDelete: Cascade)
  commentId    String?
  comment      Comment?     @relation(fields: [commentId], references: [id], onDelete: Cascade)
  quoteId      String?
  quote        Quote?       @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  bookListId   String?
  bookList     BookList?    @relation(fields: [bookListId], references: [id], onDelete: Cascade)
  reviewId     String?
  review       Review?      @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@unique([userId, postId])
  @@unique([userId, quoteId])
  @@unique([userId, commentId])
  @@unique([userId, bookListId])
  @@index([postId])
  @@index([commentId])
  @@index([quoteId])
  @@index([bookListId])
}

model Comment {
  id              String          @id @default(cuid())
  body            String
  commentAbleType CommentAbleType
  postId          String?
  post            Post?           @relation(fields: [postId], references: [id], onDelete: Cascade)
  quoteId         String?
  quote           Quote?          @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  userId          String
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookListId      String?
  bookList        BookList?       @relation(fields: [bookListId], references: [id])
  reviewId        String?
  review          Review?         @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  likes           Like[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@unique([userId, postId])
  @@unique([userId, quoteId])
  @@unique([userId, bookListId])
  @@index([userId])
}

model Saved {
  id           String       @id @default(cuid())
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  saveableType SaveableType
  postId       String?
  post         Post?        @relation(fields: [postId], references: [id], onDelete: Cascade)
  quoteId      String?
  quote        Quote?       @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  bookId       String?
  book         Book?        @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookListId   String?
  bookList     BookList?    @relation(fields: [bookListId], references: [id], onDelete: Cascade)
  reviewId     String?
  review       Review?      @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@unique([userId, postId])
  @@unique([userId, quoteId])
  @@unique([userId, bookId])
  @@unique([userId, bookListId])
  @@unique([userId, reviewId])
  @@index([userId])
}

model Follows {
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String

  @@id([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

enum UserRole {
  ADMIN
  USER
}

enum LikeableType {
  POST
  COMMENT
  QUOTE
  BOOKLIST
  REVIEW
}

enum SaveableType {
  POST
  QUOTE
  BOOK
  BOOKLIST
  REVIEW
}

enum CommentAbleType {
  POST
  QUOTE
  BOOKLIST
  REVIEW
}

enum AuthorRole {
  WRITER
  TRANSLATOR
  EDITOR
  ILLUSTRATOR
  CO_AUTHOR
}
